<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs 
	title="__MSG_daysuntil__"
	title_url="http://leancode.com/daysuntil/"
	directory_title="__MSG_daysuntilcountdown__"
	description="__MSG_description__"
	scrolling="false"
	singleton="false"
	author="Bernie T."
	author_email="widgets@leancode.com"
	author_affiliation="Leancode Inc."
	author_location="Bellevue, WA"
	screenshot="http://daysuntil.googlecode.com/svn/trunk/screenshot.png"
	thumbnail="http://daysuntil.googlecode.com/svn/trunk/thumbnail.png"
	author_photo="http://daysuntil.googlecode.com/svn/trunk/author_photo.png"
	author_aboutme="Software developer and entrepreneur. Look me up to talk about your next project."
	author_quote="We can never know about the days to come. But we think about them anyway...Anticipation. - Carly"
	author_link="http://leancode.com/"
>
	<Locale messages="http://daysuntil.googlecode.com/svn/trunk/ALL_ALL.xml"/>
	<Locale lang="es" messages="http://daysuntil.googlecode.com/svn/trunk/es_ALL.xml"/>
	<Locale lang="pt-BR" messages="http://daysuntil.googlecode.com/svn/trunk/pt_br_ALL.xml"/>
	<Require feature="analytics"/>
	<Require feature="setprefs"/>
	<Require feature="dynamic-height"/>
	<Require feature="minimessage" /> 
</ModulePrefs>
<UserPref name="reminders" display_name="__MSG_yourreminders__" datatype="string" default_value="[]"></UserPref>
<UserPref name="ver" display_name="__MSG_daysuntil__ __MSG_version__" datatype="string" default_value=""></UserPref>
<Content type="html">
<![CDATA[

<script language="JavaScript" src="http://dayssince.googlecode.com/svn/trunk/json_ori.js"></script>

<script>
	
var daysUntil__MODULE_ID__ = function () {

	// private attributes, methods, and initialization code

	var minutes = 1000*60;
	var hours = minutes*60;
	var days = hours*24;
	var years = days*365;
	var igPrefs;
	var reminders;
	var schemaUpgraded = false;

	var DESC = 0;
	var DATE = 1;

	// message keys must start with 'msg' (to filter out other object attribs)
	// just comment out messages that we don't want to display anymore
	// don't delete them, because we can't ever reuse the keys (message #s)
	// to add a new one, 
	//   1. add to this list
	//   2. add the appropriate strings to ALL locale files
	//   3. add the preference name as a UserPref
	var messages = {
		// msg1: ""
	};

	function displayMessages() {
		var mini = new _IG_MiniMessage(__MODULE_ID__);

		for (var msg in messages) {
			if ((msg.substring(0,3) == 'msg') && (igPrefs.getInt(msg) == 0)) {
				mini.createDismissibleMessage(messages[msg], function () {
				igPrefs.set(msg, "1");
				return true;
				});
			}
		}
	}

	function decodeDates() {
		for (var i = 0; i < reminders.length; i++) {
			var d = reminders[i][DATE].match(/^(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)Z/);

			if (d) {
				reminders[i][DATE] = new Date(Date.UTC(d[1],d[2]-1,d[3],d[4],d[5],d[6]));
			} else {
				reminders[i][DATE] = new Date();
			}
		}
	}

	function loadReminders() {
		var prefs = igPrefs.getString("reminders");

		if (prefs != "") {
			reminders = prefs.parseJSON();
		}
		upgradeSchema();
		decodeDates();

		if (schemaUpgraded) saveReminders();

		createTable();
	}

	function upgradeSchema() {
		if ((reminders.length > 0) && (reminders[0].name)) {
			// old format stored in prefs. Upgrade to latest schema
			var newr = [];

			for (var i = 0; i < reminders.length; i++) {

				// put the date in ISO string format that's now 
				// what we expect when preferences are stored.
				// we'll then convert back in decodeDates()
				var d = new Date(parseInt(reminders[i].date));
				d = d.toJSONString();
				// toJSONString puts extra quotes around for eval(). Remove.
				d = d.substring(1, d.length-1);
				newr.push([
					reminders[i].name,
					d
				]);
			}
			reminders = newr;
			schemaUpgraded = true;
		}
	}

	function saveReminders() {

		// Because set() doesn't tell us about errors,
		// we must enforce the current documented (2K) preference limit here.
		var json = reminders.toJSONString();
		var encoded = _esc(json);

		// Approx 200 chars of overhead in the rest of Google's HTTP GET
		// requests with all the preferences for our gadget
		if (encoded.length < (2048 - 200)) {
			igPrefs.set("reminders", json, "ver", "$Rev$");
		} else {
			var mini = new _IG_MiniMessage(__MODULE_ID__);
			var lost = reminders.pop();

			mini.createDismissibleMessage(lost[DESC] + ": " + "__MSG_nospace__");
		}
	}

	function rowStyle(number) {
		if (number % 2 != 0)
			return "background: #F5F5DC";
		else
			return "";
	}
	
	// a,b must be reminders (which have hashed 'name' and 'date' keys)
	function sortRemindersAscending(a,b) {
		var x = calendarDaysUntil(a[DATE]);
		var y = calendarDaysUntil(b[DATE]);
		
		return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	}
	
	function createTable() {
		var html = '<table cellspacing=0px cellpadding=2px id=remindersTable__MODULE_ID__ style="padding: 0; margin: 0">';
		
		reminders.sort(sortRemindersAscending);
		
		for (i = 0; i < reminders.length; i++) {
			if (reminders[i] == null)
				break;
		
			html = html + createRow(i, reminders[i][DESC], reminders[i][DATE]);
		}
		
		html = html + '</table>';
		_gel("remindersDiv__MODULE_ID__").innerHTML = html;
		_IG_AdjustIFrameHeight();
	}
	
	function createRow(number, description, reminder_date) {
		var now = new Date();
		var daysuntil = calendarDaysUntil(reminder_date);
		description = description.replace(/(\S{8,}?)/g, 
		'$1<wbr/><span style="font-size: 1px; line-height: 1px;' + 
		'float: right !important; float: none;"> </span>');
		
		var html =
			'<tr style="' + rowStyle(number) + '">' +
			'<td style=\"text-align: center; padding 0px 2px 0px 2px; width: 100%\">' +
			'<font size="-1"><p style="margin: 0 auto; padding: 0 5px 0 5px;' +
			'word-wrap: break-word; width: 100%;">' + description +
			'</p></font></td>' +
			'<td style="text-align: right; padding 0px 2px 0px 2px;">' +
			'<div style="border: 2px solid #003300; background-color: #33FF66; color: #003300;' +
			'padding: 2px; margin: 0 2px; float: right;"><font size="-1">' + 
			daysuntil +
			'</font></div></td>' +
			'<td>' + createDelete(number) +
			'</td></tr>';

		return html;
	}

	function createDelete(number) {
		var img = _IG_GetImageUrl('http://daysuntil.googlecode.com/svn/trunk/x.gif');
		var html =
			'<a href="javascript:daysUntil__MODULE_ID__.deleteReminder(' + number + ')">' +
			'<img style="border: 0; margin: 0 2px 0 4px; padding: 0;"' +
			' src=\"' + img + '"></a>';
		return html;
	}

	// returns integer with calendar days until the endDate
	// (from the today's prior midnight, until the prior midnight of endDate)
	// endDate is a Date object
	// moves the year, if necessary, to insure that the date is in the future
	function calendarDaysUntil(endDate) {
		var nowDate = new Date();
		
		// Roll clocks back to midnight
		var endDay = new Date(endDate.getYear(), endDate.getMonth(), endDate.getDate());
		var nowDay = new Date(nowDate.getYear(), nowDate.getMonth(), nowDate.getDate());
		
		if (endDay.getTime() < nowDay.getTime()) {
			// use date functions to avoid extra leap days, etc.
			endDay.setFullYear(nowDay.getFullYear());
			
			// if endDay is in the past year to date, still
			// need to go forward one additional year
			if (endDay.getTime() < nowDay.getTime()) {
				endDay.setFullYear(nowDay.getFullYear()+1);
			}
		}
		
		return Math.ceil((endDay.getTime()-nowDay.getTime())/days);
	}
	
	function resetForm() {
		var now = new Date();

		_gel("newYear__MODULE_ID__").value = now.getFullYear();
		_gel("newMonth__MODULE_ID__").value = (now.getMonth()+1);
		_gel("newDay__MODULE_ID__").value = now.getDate();
		_gel("newDescription__MODULE_ID__").value = "";
	}

	// return the "public" attributes and method closures of our object

	return {
		onLoad : function() {
			igPrefs = new _IG_Prefs(__MODULE_ID__);

			loadReminders();
			displayMessages();

			resetForm();
		},

		addReminder : function(description, year, month, day) {
			var description = _trim(description);
			var date = new Date(parseInt(year),parseInt(month)-1,parseInt(day));
		
			resetForm();
			if (description == "")
				return;
			
			reminders.push([
				description, 
				date, 
			]);
			
			saveReminders();
			createTable();
			return false;
		},

		deleteReminder: function(number) {
			var beginning = reminders.slice(0, number);
			var end = reminders.slice(number + 1, reminders.length);

			reminders = beginning.concat(end);
			saveReminders();
			createTable();
		}
	};
}();

_IG_RegisterOnloadHandler(daysUntil__MODULE_ID__.onLoad);
_IG_Analytics("UA-99119-16", "/daysuntil");

</script>

<form name = "newReminderForm__MODULE_ID__"
	style="padding: 0; margin: 0;"
	onsubmit="return daysUntil__MODULE_ID__.addReminder(
	document.newReminderForm__MODULE_ID__.
	newDescription__MODULE_ID__.value,
	newYear__MODULE_ID__.value,
	document.newReminderForm__MODULE_ID__.
	newMonth__MODULE_ID__.value,
	document.newReminderForm__MODULE_ID__.
	newDay__MODULE_ID__.value
	)"> <input size="8" id="newDescription__MODULE_ID__" type="text"
		/> <input size="4" id="newYear__MODULE_ID__" 
		value="" type="text"> <input size="2" id="newMonth__MODULE_ID__" 
		value="" type="text"> <input size="2" id="newDay__MODULE_ID__" 
		value="" type="text"> <input type="submit" value="__MSG_Add__"
		/>
</form>
<div id="remindersDiv__MODULE_ID__"></div>
]]>
</Content>
</Module>

